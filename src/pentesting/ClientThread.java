package pentesting;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

public class ClientThread extends Thread {

	String host, username, password;
	int port, time;

	public void run() {

		System.setProperty("javax.net.ssl.trustStore", "res/client/client.truststore");
		System.setProperty("javax.net.ssl.trustStorePassword", "123456");

		try {
			System.setProperty("javax.net.ssl.trustStore", "res/client/client.truststore");
			System.setProperty("javax.net.ssl.trustStorePassword", "123456");

			SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
			SSLSocket socket = (SSLSocket) factory.createSocket(host, port);

			BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			DataOutputStream writer = new DataOutputStream(socket.getOutputStream());

			writer.writeBytes(username + "\n" + password + "\n");
			System.out.println(reader.readLine());

			while (true) {
				writer.writeBytes("reload all\n");
				System.out.println(reader.readLine());

				try {
					Thread.sleep(time);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public ClientThread(String host, int port, String username, String password, int time) {
		this.host = host;
		this.port = port;
		this.username = username;
		this.password = password;
		this.time = time;
	}
}
